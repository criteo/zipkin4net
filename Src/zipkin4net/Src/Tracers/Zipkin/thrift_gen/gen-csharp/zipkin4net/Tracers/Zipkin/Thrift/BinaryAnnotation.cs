/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace zipkin4net.Tracers.Zipkin.Thrift
{

  /// <summary>
  /// Binary annotations are tags applied to a Span to give it context. For
  /// example, a binary annotation of HTTP_PATH ("http.path") could the path
  /// to a resource in a RPC call.
  /// 
  /// Binary annotations of type STRING are always queryable, though more a
  /// historical implementation detail than a structural concern.
  /// 
  /// Binary annotations can repeat, and vary on the host. Similar to Annotation,
  /// the host indicates who logged the event. This allows you to tell the
  /// difference between the client and server side of the same key. For example,
  /// the key "http.path" might be different on the client and server side due to
  /// rewriting, like "/api/v1/myresource" vs "/myresource. Via the host field,
  /// you can see the different points of view, which often help in debugging.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BinaryAnnotation : TBase
  {

    /// <summary>
    /// Name used to lookup spans, such as "http.path" or "finagle.version".
    /// </summary>
    public string Key { get; set; }

    /// <summary>
    /// Serialized thrift bytes, in TBinaryProtocol format.
    /// 
    /// For legacy reasons, byte order is big-endian. See THRIFT-3217.
    /// </summary>
    public byte[] Value { get; set; }

    /// <summary>
    /// The thrift type of value, most often STRING.
    /// 
    /// annotation_type shouldn't vary for the same key.
    /// 
    /// <seealso cref="AnnotationType"/>
    /// </summary>
    public AnnotationType? Annotation_type { get; set; }

    /// <summary>
    /// The host that recorded value, allowing query by service name or address.
    /// 
    /// There are two exceptions: when key is "ca" or "sa", this is the source or
    /// destination of an RPC. This exception allows zipkin to display network
    /// context of uninstrumented services, such as browsers or databases.
    /// </summary>
    public Endpoint Host { get; set; }

    public BinaryAnnotation() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Key = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Annotation_type = (AnnotationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Host = new Endpoint();
              Host.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BinaryAnnotation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Key);
        oprot.WriteFieldEnd();
      }
      if (Value != null) {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      if (Annotation_type != null) {
        field.Name = "annotation_type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Annotation_type.Value);
        oprot.WriteFieldEnd();
      }
      if (Host != null) {
        field.Name = "host";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Host.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as BinaryAnnotation;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Key, other.Key)
        && System.Object.Equals(Value, other.Value)
        && System.Object.Equals(Annotation_type, other.Annotation_type)
        && System.Object.Equals(Host, other.Host);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (Key == null ? 0 : (Key.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Value == null ? 0 : (Value.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Annotation_type == null ? 0 : (Annotation_type.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Host == null ? 0 : (Host.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BinaryAnnotation(");
      bool __first = true;
      if (Key != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key);
      }
      if (Value != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      if (Annotation_type != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Annotation_type: ");
        __sb.Append(Annotation_type);
      }
      if (Host != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Host: ");
        __sb.Append(Host== null ? "<null>" : Host.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
