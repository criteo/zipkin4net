/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace zipkin4net.Tracers.Zipkin.Thrift
{

  /// <summary>
  /// Indicates the network context of a service recording an annotation with two
  /// exceptions.
  /// 
  /// When a BinaryAnnotation, and key is CLIENT_ADDR or SERVER_ADDR,
  /// the endpoint indicates the source or destination of an RPC. This exception
  /// allows zipkin to display network context of uninstrumented services, or
  /// clients such as web browsers.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Endpoint : TBase
  {

    /// <summary>
    /// IPv4 host address packed into 4 bytes.
    /// 
    /// Ex for the ip 1.2.3.4, it would be (1 << 24) | (2 << 16) | (3 << 8) | 4
    /// </summary>
    public int? Ipv4 { get; set; }

    /// <summary>
    /// IPv4 port or 0, if unknown.
    /// 
    /// Note: this is to be treated as an unsigned integer, so watch for negatives.
    /// </summary>
    public short? Port { get; set; }

    /// <summary>
    /// Classifier of a source or destination in lowercase, such as "zipkin-web".
    /// 
    /// This is the primary parameter for trace lookup, so should be intuitive as
    /// possible, for example, matching names in service discovery.
    /// 
    /// Conventionally, when the service name isn't known, service_name = "unknown".
    /// However, it is also permissible to set service_name = "" (empty string).
    /// The difference in the latter usage is that the span will not be queryable
    /// by service name unless more information is added to the span with non-empty
    /// service name, e.g. an additional annotation from the server.
    /// 
    /// Particularly clients may not have a reliable service name at ingest. One
    /// approach is to set service_name to "" at ingest, and later assign a
    /// better label based on binary annotations, such as user agent.
    /// </summary>
    public string Service_name { get; set; }

    /// <summary>
    /// IPv6 host address packed into 16 bytes. Ex Inet6Address.getBytes()
    /// </summary>
    public byte[] Ipv6 { get; set; }

    public Endpoint() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Ipv4 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I16) {
              Port = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Service_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Ipv6 = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Endpoint");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Ipv4 != null) {
        field.Name = "ipv4";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Ipv4.Value);
        oprot.WriteFieldEnd();
      }
      if (Port != null) {
        field.Name = "port";
        field.Type = TType.I16;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Port.Value);
        oprot.WriteFieldEnd();
      }
      if (Service_name != null) {
        field.Name = "service_name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Service_name);
        oprot.WriteFieldEnd();
      }
      if (Ipv6 != null) {
        field.Name = "ipv6";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Ipv6);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as Endpoint;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Ipv4, other.Ipv4)
        && System.Object.Equals(Port, other.Port)
        && System.Object.Equals(Service_name, other.Service_name)
        && System.Object.Equals(Ipv6, other.Ipv6);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (Ipv4 == null ? 0 : (Ipv4.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Port == null ? 0 : (Port.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Service_name == null ? 0 : (Service_name.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Ipv6 == null ? 0 : (Ipv6.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Endpoint(");
      bool __first = true;
      if (Ipv4 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ipv4: ");
        __sb.Append(Ipv4);
      }
      if (Port != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Port: ");
        __sb.Append(Port);
      }
      if (Service_name != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Service_name: ");
        __sb.Append(Service_name);
      }
      if (Ipv6 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ipv6: ");
        __sb.Append(Ipv6);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
